user_management (unblock, block) - In this code, when the user clicks the block button it should show a sweet alert asking "Are you sure you want to block this user?". If the user confirms it then use fetch to go to database and change the isBlocked to true and then refresh the page. After the refresh the block button will be replaced with unblock button. so when the user clicks the unblock button a sweet alert should ask "Are you sure you want to unblock this user?". If the user confirms it, then use fetch to go to database and change the value of isBlocked to false and then refresh the page.

user_management (search & sort) - In this code, implement the search functionality along with filtering it with the form-select that displays the appropriate result according to the status (isBlocked field in the database).

category_management (to now show items whose category is unlisted) - in this code i want to search the products for the ones that mathches the category and negate the value of it's isUnlisted key value pair.

shopping_page (search & filter) - in this code there is an option to filter the products according to their category. I need it to show only products that are matching the category. I also need it to work with the sorting in this page. Implement every sort in the drop down menu. Use fetch and give the complete codes that are needed to be changed.

otp (hide resend button) - This is a ejs file and it loads after the program the has send a otp to the user's email. so when this page loads I want block the resend button until the countdown has reached zero, the user should not be able to click it. after the countdown has reached zero I want to block submit button so the user can't click it. Then implement the logic to send the otp using fetch. Provide me the complete codes of ejs file. I will attach the routes and controller down below. give me the routes that i must add if there are any changes to be made to the controllers.

addtocart from landing page - In this page when the user clicks the add-to-cart a tag, if there is user it should go to the add the product id to the products in the cart model. After that it should reload the page.

forgot password - in this code when the user click the send OTP button, it should check if the email id in the user database. Use fetch to do this. if the email exists send a mail to the user's email and show a sweet alert to enter a the OTP and 2 buttons to confirm and to cancel. If the user clicks confirm it should check if the entered otp and otp send are the same. If they are the same it should go to another sweet alert with 2 fields to enter a new password and one to confirm  the entered password. The new password field should have form validation to check if the password contains atleast 8 charactors, 1 symbol and atleast 1 number. The confirm password field should check if the password are same as the previous field. If they match, and when user clicks the submit button, it should update the user's password in the user data base with the newly entered password. Then redirect to login page. In both sweet alert if the user clicks the cancel button it should take them to the login page:

edit profile details - I want to modify the form with the id as profileForm such that when the user clicks the submit button, i want to check
1. if there were any changes made to the fields with ids nameInput and emailInput. If there were no changes then show a sweet alert that there was no changes made. Then do nothing after that.
2. if there were changes made then I want to check if the input fields are blank. If not blank then check if the nameInput contains only alphabets if not then show a sweetalert that says only alphabets are allowed in the name. Then I want to check if the emailInput has match a email format.
if these conditions are met then I want to go to the database and change the user database and set name in the database with the value of nameInput and email in database with value of emailInput. Then redirect to the /my_profile page that shows the new name and email in the nameInput and emailInput.
use fetch to show do check and remove the post and method from the profileForm form if you need to make these changes. Provide with the ejs, routes and the controller that is needed to be added.

my_address (editing an address) - In this code, when the user clicks the edit button a sweet alert should appear with input fields for house name, street name, city, state, country, pincode, phone number and a drop down menu to select the type of address which has home, ofice and other as option. This should have 2 buttons to save and cancel.




<script>
  document.addEventListener("DOMContentLoaded", () => {
    fetch("/admin/get_users")
      .then((response) => {
        if (!response.ok) {
          throw new Error("Failed to fetch users");
        }
        return response.json();
      })
      .then((users) => {
        console.log(users);

        const searchInput = document.getElementById("searchInput");
        const userTableBody = document.getElementById("userTableBody");
        const formSelect = document.querySelector(".form-select");

        const filterAndRenderUsers = (status, searchTerm) => {
          const filteredUsers = users.filter((user) => {
            const isMatch =
              user.name.toLowerCase().includes(searchTerm) ||
              user.email.toLowerCase().includes(searchTerm);

            if (status === "Show all") {
              return isMatch;
            } else if (status === "Active") {
              return !user.isBlocked && isMatch;
            } else if (status === "Blocked") {
              return user.isBlocked && isMatch;
            }

            return false;
          });

          renderUsers(filteredUsers);
        };

        const renderUsers = (users) => {
          userTableBody.innerHTML = "";
          users.forEach((user, index) => {
            const statusBadgeClass = user.isBlocked
              ? "alert-danger"
              : "alert-success";
            const statusText = user.isBlocked ? "Blocked" : "Active";

            const row = `
              <tr class="text-center">
                <td class="text-center">${index + 1}</td>
                <td class="text-center">${user.name}</td>
                <td class="text-center">${user.email}</td>
                <td class="text-center">
                  <span class="rounded-pill ${statusBadgeClass}" style="padding: 8px">${statusText}</span>
                </td>
                <td>
                  <button class="btn ${
                    user.isBlocked ? "btn-success" : "btn-danger"
                  } toggle-button" data-id="${user._id}">
                    ${user.isBlocked ? "Unblock" : "Block"}
                  </button>
                </td>
              </tr>
            `;

            userTableBody.innerHTML += row;
          });
        };

        const toggleStatus = (userId, action) => {
          const confirmationMessage =
            action === "block"
              ? "Are you sure you want to block this user?"
              : "Are you sure you want to unblock this user?";

          Swal.fire({
            title: "Confirm",
            text: confirmationMessage,
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes",
          }).then((result) => {
            if (result.isConfirmed) {
              fetch(`/admin/toggle_user_status?id=${userId}`, {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
              })
                .then(() => {
                  location.reload(); // Refresh the page after successful toggle
                })
                .catch((error) => {
                  console.error("Error toggling user status:", error);
                  Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "Failed to toggle user status. Please try again later.",
                  });
                });
            }
          });
        };

        searchInput.addEventListener("input", () => {
          const searchTerm = searchInput.value.toLowerCase().trim();
          const selectedOption = formSelect.value;
          filterAndRenderUsers(selectedOption, searchTerm);
        });

        formSelect.addEventListener("change", (event) => {
          const selectedOption = event.target.value;
          const searchTerm = searchInput.value.toLowerCase().trim();
          filterAndRenderUsers(selectedOption, searchTerm);
        });

        // Use event delegation to handle button click events
        userTableBody.addEventListener("click", (event) => {
          if (event.target.classList.contains("toggle-button")) {
            const userId = event.target.dataset.id;
            const action = event.target.textContent.toLowerCase().trim(); // Get button text
            toggleStatus(userId, action);
          }
        });

        // Initial rendering of all users
        renderUsers(users);
      })
      .catch((error) => {
        console.error("Error fetching users:", error);
        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: "Failed to fetch users. Please try again later.",
        });
      });
  });

  // Search fetch
  function setupSearch() {
    const searchInput = document.getElementById("searchInput");

    searchInput.addEventListener("input", async () => {
      const query = searchInput.value.trim();

      try {
        const response = await fetch(
          `/products/search?query=${encodeURIComponent(query)}`
        );
        if (!response.ok) {
          throw new Error("Failed to fetch search results");
        }

        const searchResults = await response.json();
        displayProducts(searchResults); // Display the search results on the page
      } catch (error) {
        console.error("Error searching products:", error.message);
      }
    });
  }

  // Call setupSearch() to initialize real-time search functionality
  setupSearch();

  // Search Function
  function displayProducts(products) {
    const productGrid = document.querySelector(".product-grid-3");
    productGrid.innerHTML = ""; // Clear existing products

    products.forEach((product) => {
      const productHTML = `
      <div class="col-lg-4 col-md-4 col-12 col-sm-6">
        <div class="product-cart-wrap mb-30">
          <!-- Product image and details -->
          <a href="/load_product?id=${product._id}">
            <img class="default-img" src="/uploads/${product.media[0]}" alt="${product.name}" />
          </a>
          <div class="product-content-wrap">
            <div class="product-category">
              <a href="#">${product.category}</a>
            </div>
            <h2 class="product-name">
              <a href="/load_product?id=${product._id}">${product.name}</a>
            </h2>
            <div class="product-price">
              <span>$${product.price}</span>
            </div>
            <div class="product-action-1 show">
              <a aria-label="Add To Cart" class="action-btn hover-up" onclick="addToCart('${product._id}')">
                <i class="fi-rs-shopping-bag-add"></i>
              </a>
              <a aria-label="Add To Wishlist" class="action-btn hover-up" href="#">
                <i class="fi-rs-heart"></i>
              </a>
            </div>
          </div>
        </div>
      </div>
    `;

      productGrid.insertAdjacentHTML("beforeend", productHTML);
    });
  }
</script>